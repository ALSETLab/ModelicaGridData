/* Simulation code for IEEE14.IEEE14_Base_Case generated by the OpenModelica Compiler OpenModelica v1.16.2 (64-bit). */
#if !defined(IEEE14_IEEE14_Base_Case__MODEL_H)
#define IEEE14_IEEE14_Base_Case__MODEL_H

#include "openmodelica.h"
#include "openmodelica_func.h"
#include "simulation_data.h"
#include "simulation/simulation_info_json.h"
#include "simulation/simulation_runtime.h"
#include "util/omc_error.h"
#include "util/parallel_helper.h"
#include "simulation/solver/model_help.h"
#include "simulation/solver/delay.h"
#include "simulation/solver/linearSystem.h"
#include "simulation/solver/nonlinearSystem.h"
#include "simulation/solver/mixedSystem.h"

#if defined(__cplusplus)
extern "C" {
#endif

#include <string.h>

#include "IEEE14.IEEE14_Base_Case_functions.h"

#define Complex_index 0
#define IEEE14_PF__Data_Bus_index 1
#define IEEE14_PF__Data_Loads_index 2
#define IEEE14_PF__Data_Machines_index 3
#define IEEE14_PF__Data_Power__Flow_index 4
#define IEEE14_PF__Data__omcQPower_5F_5FFlow_24pf_index 5
#define IEEE14_PF__Data_Trafos_index 6
#define IEEE14_PF__Data_Power__Flow_PowerFlow_index 7
#define IEEE14_PF__Data__omcQPower_5F_5FFlow_24pf_PowerFlow_index 8
#define Modelica_Math_atan3_index 9
#define OpenIPSL_Electrical_SystemBase_index 10
#define OpenIPSL_Electrical__omcQSystemBase_24SysData_index 11
#define OpenIPSL_Electrical_Controls_PSSE_ES_BaseClasses_calculate__dc__exciter__params_index 12
#define OpenIPSL_NonElectrical_Functions_SE_index 13

extern void IEEE14_IEEE14_Base_Case_callExternalObjectDestructors(DATA *_data, threadData_t *threadData);
#if !defined(OMC_NUM_NONLINEAR_SYSTEMS) || OMC_NUM_NONLINEAR_SYSTEMS>0
extern void IEEE14_IEEE14_Base_Case_initialNonLinearSystem(int nNonLinearSystems, NONLINEAR_SYSTEM_DATA *data);
#endif
#if !defined(OMC_NUM_LINEAR_SYSTEMS) || OMC_NUM_LINEAR_SYSTEMS>0
#endif
#if !defined(OMC_NUM_MIXED_SYSTEMS) || OMC_NUM_MIXED_SYSTEMS>0
#endif
#if !defined(OMC_NO_STATESELECTION)
extern void IEEE14_IEEE14_Base_Case_initializeStateSets(int nStateSets, STATE_SET_DATA* statesetData, DATA *data);
#endif
extern int IEEE14_IEEE14_Base_Case_functionAlgebraics(DATA *data, threadData_t *threadData);
extern int IEEE14_IEEE14_Base_Case_function_storeDelayed(DATA *data, threadData_t *threadData);
extern int IEEE14_IEEE14_Base_Case_updateBoundVariableAttributes(DATA *data, threadData_t *threadData);
extern int IEEE14_IEEE14_Base_Case_functionInitialEquations(DATA *data, threadData_t *threadData);
extern int IEEE14_IEEE14_Base_Case_functionInitialEquations_lambda0(DATA *data, threadData_t *threadData);
extern int IEEE14_IEEE14_Base_Case_functionRemovedInitialEquations(DATA *data, threadData_t *threadData);
extern int IEEE14_IEEE14_Base_Case_updateBoundParameters(DATA *data, threadData_t *threadData);
extern int IEEE14_IEEE14_Base_Case_checkForAsserts(DATA *data, threadData_t *threadData);
extern int IEEE14_IEEE14_Base_Case_function_ZeroCrossingsEquations(DATA *data, threadData_t *threadData);
extern int IEEE14_IEEE14_Base_Case_function_ZeroCrossings(DATA *data, threadData_t *threadData, double* gout);
extern int IEEE14_IEEE14_Base_Case_function_updateRelations(DATA *data, threadData_t *threadData, int evalZeroCross);
extern const char* IEEE14_IEEE14_Base_Case_zeroCrossingDescription(int i, int **out_EquationIndexes);
extern const char* IEEE14_IEEE14_Base_Case_relationDescription(int i);
extern void IEEE14_IEEE14_Base_Case_function_initSample(DATA *data, threadData_t *threadData);
extern int IEEE14_IEEE14_Base_Case_initialAnalyticJacobianG(void* data, threadData_t *threadData, ANALYTIC_JACOBIAN *jacobian);
extern int IEEE14_IEEE14_Base_Case_initialAnalyticJacobianA(void* data, threadData_t *threadData, ANALYTIC_JACOBIAN *jacobian);
extern int IEEE14_IEEE14_Base_Case_initialAnalyticJacobianB(void* data, threadData_t *threadData, ANALYTIC_JACOBIAN *jacobian);
extern int IEEE14_IEEE14_Base_Case_initialAnalyticJacobianC(void* data, threadData_t *threadData, ANALYTIC_JACOBIAN *jacobian);
extern int IEEE14_IEEE14_Base_Case_initialAnalyticJacobianD(void* data, threadData_t *threadData, ANALYTIC_JACOBIAN *jacobian);
extern int IEEE14_IEEE14_Base_Case_initialAnalyticJacobianF(void* data, threadData_t *threadData, ANALYTIC_JACOBIAN *jacobian);
extern int IEEE14_IEEE14_Base_Case_functionJacG_column(void* data, threadData_t *threadData, ANALYTIC_JACOBIAN *thisJacobian, ANALYTIC_JACOBIAN *parentJacobian);
extern int IEEE14_IEEE14_Base_Case_functionJacA_column(void* data, threadData_t *threadData, ANALYTIC_JACOBIAN *thisJacobian, ANALYTIC_JACOBIAN *parentJacobian);
extern int IEEE14_IEEE14_Base_Case_functionJacB_column(void* data, threadData_t *threadData, ANALYTIC_JACOBIAN *thisJacobian, ANALYTIC_JACOBIAN *parentJacobian);
extern int IEEE14_IEEE14_Base_Case_functionJacC_column(void* data, threadData_t *threadData, ANALYTIC_JACOBIAN *thisJacobian, ANALYTIC_JACOBIAN *parentJacobian);
extern int IEEE14_IEEE14_Base_Case_functionJacD_column(void* data, threadData_t *threadData, ANALYTIC_JACOBIAN *thisJacobian, ANALYTIC_JACOBIAN *parentJacobian);
extern int IEEE14_IEEE14_Base_Case_functionJacF_column(void* data, threadData_t *threadData, ANALYTIC_JACOBIAN *thisJacobian, ANALYTIC_JACOBIAN *parentJacobian);
extern const char* IEEE14_IEEE14_Base_Case_linear_model_frame(void);
extern const char* IEEE14_IEEE14_Base_Case_linear_model_datarecovery_frame(void);
extern int IEEE14_IEEE14_Base_Case_mayer(DATA* data, modelica_real** res, short *);
extern int IEEE14_IEEE14_Base_Case_lagrange(DATA* data, modelica_real** res, short *, short *);
extern int IEEE14_IEEE14_Base_Case_pickUpBoundsForInputsInOptimization(DATA* data, modelica_real* min, modelica_real* max, modelica_real*nominal, modelica_boolean *useNominal, char ** name, modelica_real * start, modelica_real * startTimeOpt);
extern int IEEE14_IEEE14_Base_Case_setInputData(DATA *data, const modelica_boolean file);
extern int IEEE14_IEEE14_Base_Case_getTimeGrid(DATA *data, modelica_integer * nsi, modelica_real**t);
extern void IEEE14_IEEE14_Base_Case_function_initSynchronous(DATA * data, threadData_t *threadData);
extern void IEEE14_IEEE14_Base_Case_function_updateSynchronous(DATA * data, threadData_t *threadData, long i);
extern int IEEE14_IEEE14_Base_Case_function_equationsSynchronous(DATA * data, threadData_t *threadData, long i);
extern void IEEE14_IEEE14_Base_Case_read_input_fmu(MODEL_DATA* modelData, SIMULATION_INFO* simulationData);
extern void IEEE14_IEEE14_Base_Case_function_savePreSynchronous(DATA *data, threadData_t *threadData);
extern int IEEE14_IEEE14_Base_Case_inputNames(DATA* data, char ** names);
extern int IEEE14_IEEE14_Base_Case_initializeDAEmodeData(DATA *data, DAEMODE_DATA*);
extern int IEEE14_IEEE14_Base_Case_functionLocalKnownVars(DATA*, threadData_t*);
extern int IEEE14_IEEE14_Base_Case_symbolicInlineSystem(DATA*, threadData_t*);

#include "IEEE14.IEEE14_Base_Case_literals.h"




#if defined(HPCOM) && !defined(_OPENMP)
  #error "HPCOM requires OpenMP or the results are wrong"
#endif
#if defined(_OPENMP)
  #include <omp.h>
#else
  /* dummy omp defines */
  #define omp_get_max_threads() 1
#endif

#if defined(__cplusplus)
}
#endif

#endif /* !defined(IEEE14_IEEE14_Base_Case__MODEL_H) */


